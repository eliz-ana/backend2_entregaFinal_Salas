🛒 Ecommerce API – Express + Mongoose

Back-end con capas profesionales: Controllers → Services → Repositories → DAOs → Models.
Incluye autenticación JWT, roles (admin/user), carritos, compra con tickets y recupero de contraseña por email (token 1h).

🚀 Requisitos

Node.js 18+
MongoDB Atlas
Cliente REST (Insomnia / Postman)

⚙️ Configuración

Clonar e instalar:

git clone <URL_DEL_REPO>
cd <CARPETA>
npm install


Variables de entorno
Copiá .env.example a .env y completá valores:

PORT=8080
NODE_ENV=development

MONGO_URI=mongodb+srv://<USER>:<PASSWORD>@cluster0.zcaes0j.mongodb.net/class_zero?retryWrites=true&w=majority&appName=Cluster0

JWT_SECRET=<CLAVE_SECRETA>
JWT_EXPIRES_IN=1d

APP_BASE_URL=http://localhost:8080

# Mailtrap (Email Sandbox)
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USER=<MAILTRAP_USER>
MAIL_PASS=<MAILTRAP_PASS>



Ejecutar

# modo dev
npm run dev

# producción
npm start


Servidor: http://localhost:8080

🧱 Arquitectura
src/
  config/        (passport, db)
  controllers/   (lógica HTTP)
  services/      (lógica de negocio: purchase, password reset, mail)
  repositories/  (patrón Repository)
  dao/           (acceso a datos)
  models/        (Mongoose)
  middlewares/   (auth/roles/validaciones)
  routes/        (routers)

🔐 Autenticación & Autorización

JWT vía passport-jwt (estrategia current) con cookie authToken o Bearer.

Roles:

admin: puede crear/editar/eliminar products.
user: puede operar su cart y comprar.

/api/sessions/current devuelve un DTO sin datos sensibles.

🧪 Insomnia

Se incluye colección en insomnia_test.
Flujo típico:

Registrar o login → copiar token
Probar endpoints protegidos usando Bearer o la cookie authToken.

# Importante se comparten credenciales SMTP para Mailtrap por privado

### Cómo probar reset de contraseña
📌 Endpoints
Sessions

1) POST /api/sessions/forgot  { "email": "<usuario_existente>" }
2) Revisar Mailtrap (Sandbox) y abrir el mail → copiar `token` del botón.
3) POST /api/sessions/reset  { "email": "<mismo_email>", "token": "<TOKEN>", "newPassword": "NuevaPass!123" }
4) Volver a loguear con la nueva contraseña (la anterior debe fallar).
5) Reintentar el mismo token → 401 (token usado/expirado en 1h).


body: { "email": "..." } → responde 200 siempre

POST /api/sessions/reset – aplica nueva contraseña (no permite repetir)

body: { "email": "...", "token": "...", "newPassword": "..." }

Users (ejemplos)

GET /api/users – listar (sin password)
GET /api/users/:uid – detalle (sin password)
POST /api/users – crear
PUT /api/users/:uid – actualizar (normaliza email y re-hashea si cambia pass)
DELETE /api/users/:uid – eliminar

Internamente: Repository + DAO con proyección -password donde corresponde.

Products

GET /api/products – público
GET /api/products/:pid – público
POST /api/products – admin
PUT /api/products/:pid – admin
DELETE /api/products/:pid – admin

Carts

POST /api/carts – user (crea carrito para el user actual)
GET /api/carts/:cid?populated=true – user
POST /api/carts/:cid/product/:pid – user (agrega/incrementa)
PUT /api/carts/:cid/product/:pid – user (setea quantity)
DELETE /api/carts/:cid/product/:pid – user (remueve item)
DELETE /api/carts/:cid – user (vacía)

POST /api/carts/:cid/purchase – user
Procesa compra: descuenta stock donde alcanza, genera Ticket y deja en el carrito los pendientes. Respuesta:

{ "ticket": { "code": "...", "amount": 1234, "purchaser": "email" }, "unprocessedProducts": ["<pid>", ...] }

🎫 Ticket

Modelo tickets: { code, purchase_datetime, amount, purchaser }.
Se crea en /purchase si hubo productos con stock suficiente.

✉️ Recuperación de contraseña (detalle)

/forgot genera token aleatorio, guarda hash SHA-256 + expiresAt=now+1h, y envía email (Mailtrap Sandbox).
/reset valida token (hash y vencimiento), evita repetir la contraseña actual, actualiza el hash y marca el token como usado.

✅ Criterios de la entrega (cumplidos)

DAO + DTO en persistencia (password no expuesta).

Patrón Repository separando negocio y datos.

Middleware de autorización por rol + estrategia current.

Modelo Ticket + lógica de compra (stock, tickets, compras parciales).

Arquitectura profesional y variables de entorno.

Recupero de contraseña con mail, expiración 1h y “no repetir”.

🩺 Healthcheck

GET /health (si está en el repo) para verificar que el server está arriba.